generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ARTIST
  ADMIN
}

enum UploadTrackStatus {
  PENDING
  UPLOADED
  REJECTED
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  uId               Int
  email             String             @unique
  password          String
  username          String             @unique
  role              UserRole           @default(USER)
  refreshToken      String?
  createdAt         DateTime           @default(now())
  favoriteTracks    FavoriteTrack[]
  playlists         Playlist[]
  artist            Artist?
  userPlainPassword UserPlainPassword?
}

model UserPlainPassword {
  userId   String @id @default(auto()) @map("_id") @db.ObjectId
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  password String
}

model Artist {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  artistPhoto String?
  name        String        @unique
  tracks      Track[]
  listening   Int           @default(0)
  albums      Album[]
  TrackStatus TrackStatus[]
  Featuring   Featuring[]
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String        @unique @db.ObjectId
}

model TrackStatus {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  status    UploadTrackStatus @default(UPLOADED)
  reson     String?
  artist    Artist            @relation(fields: [artistId], references: [id])
  artistId  String            @db.ObjectId
  createdAt DateTime          @default(now())
  album     Album             @relation(fields: [albumId], references: [id])
  albumId   String            @unique @db.ObjectId
}

model Featuring {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  track    Track  @relation(fields: [trackId], references: [id])
  trackId  String @db.ObjectId
  artist   Artist @relation(fields: [artistId], references: [id])
  artistId String @db.ObjectId
}

model Track {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  cover      String
  track      String
  featuring  Featuring[]
  artist     Artist?         @relation(fields: [artistId], references: [id])
  artistId   String?         @db.ObjectId
  listening  Int             @default(0)
  addedAt    DateTime        @default(now())
  uploadedAt DateTime?
  duration   String
  favoriteBy FavoriteTrack[]
  playlist   Playlist?       @relation(fields: [playlistId], references: [id])
  playlistId String?         @db.ObjectId
  album      Album?          @relation(fields: [albumId], references: [id])
  albumId    String?         @db.ObjectId
}

model FavoriteTrack {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  track   Track    @relation(fields: [trackId], references: [id])
  trackId String   @db.ObjectId
  user    User     @relation(fields: [userId], references: [id])
  userId  String   @db.ObjectId
  addedAt DateTime @default(now())
}

model Playlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  cover     String?
  isFixed   Boolean  @default(false)
  tracks    Track[]
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

model Album {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  artist      Artist       @relation(fields: [artistId], references: [id])
  artistId    String       @db.ObjectId
  title       String
  cover       String
  tracks      Track[]
  createdAt   DateTime     @default(now())
  trackStatus TrackStatus?
}
