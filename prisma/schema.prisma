generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ARTIST
  ADMIN
}

enum UploadTrackStatus {
  PENDING
  UPLOADED
  REJECTED
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  uId            Int
  email          String          @unique
  password       String
  username       String          @unique
  role           UserRole        @default(USER)
  refreshToken   String?
  createdAt      DateTime        @default(now())
  favoriteTracks FavoriteTrack[]
  playlists      Playlist[]
  artistId       String?
}

model Artist {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  artistPhoto String?
  name        String        @unique
  tracks      Track[]
  listening   Int           @default(0)
  albums      Album[]
  userId      String?
  TrackStatus TrackStatus[]
}

model TrackStatus {
  id       String            @id @default(auto()) @map("_id") @db.ObjectId
  status   UploadTrackStatus @default(PENDING)
  reson    String?
  artist   Artist            @relation(fields: [artistId], references: [id])
  artistId String            @db.ObjectId
  track    Track             @relation(fields: [trackId], references: [id])
  trackId  String            @unique @db.ObjectId
}

model Track {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  cover       String
  track       String
  featuring   String[]
  artist      Artist?         @relation(fields: [artistId], references: [id])
  artistId    String?         @db.ObjectId
  listening   Int             @default(0)
  added_at    DateTime        @default(now())
  duration    String
  favoriteBy  FavoriteTrack[]
  playlist    Playlist?       @relation(fields: [playlistId], references: [id])
  playlistId  String?         @db.ObjectId
  album       Album?          @relation(fields: [albumId], references: [id])
  albumId     String?         @db.ObjectId
  trackStatus TrackStatus?
}

model FavoriteTrack {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  track    Track    @relation(fields: [trackId], references: [id])
  trackId  String   @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @db.ObjectId
  added_at DateTime @default(now())
}

model Playlist {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  tracks    Track[]
  listening Int     @default(0)
}

model Album {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  artist    Artist  @relation(fields: [artistId], references: [id])
  artistId  String  @db.ObjectId
  title     String
  cover     String
  tracks    Track[]
  listening Int     @default(0)
}
