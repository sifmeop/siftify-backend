generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ARTIST
  ADMIN
}

enum UploadTrackStatus {
  PENDING
  UPLOADED
  REJECTED
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  uId               Int
  email             String             @unique
  password          String
  username          String             @unique
  role              UserRole           @default(USER)
  refreshToken      String?
  createdAt         DateTime           @default(now())
  favoriteTracks    FavoriteTrack[]
  playlists         Playlist[]
  artist            Artist?
  userPlainPassword UserPlainPassword?
}

model UserPlainPassword {
  userId   String @id @default(auto()) @map("_id") @db.ObjectId
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  password String
}

model Artist {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  artistPhoto String?
  name        String        @unique
  tracks      Track[]
  listening   Int           @default(0)
  albums      Album[]
  TrackStatus TrackStatus[]
  Featuring   Featuring[]
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String        @unique @db.ObjectId
}

model TrackStatus {
  id       String            @id @default(auto()) @map("_id") @db.ObjectId
  status   UploadTrackStatus @default(PENDING)
  reson    String?
  artist   Artist            @relation(fields: [artistId], references: [id])
  artistId String
  track    Track             @relation(fields: [trackId], references: [id])
  trackId  String            @unique @db.ObjectId
}

model Featuring {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  track    Track  @relation(fields: [trackId], references: [id])
  trackId  String
  artist   Artist @relation(fields: [artistId], references: [id])
  artistId String
}

model Track {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  cover       String
  track       String
  featuring   Featuring[]
  artist      Artist?         @relation(fields: [artistId], references: [id])
  artistId    String?
  listening   Int             @default(0)
  addedAt     DateTime        @default(now())
  uploadedAt  DateTime?
  duration    String
  favoriteBy  FavoriteTrack[]
  playlist    Playlist?       @relation(fields: [playlistId], references: [id])
  playlistId  String?
  album       Album?          @relation(fields: [albumId], references: [id])
  albumId     String?
  trackStatus TrackStatus?
}

model FavoriteTrack {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  track   Track    @relation(fields: [trackId], references: [id])
  trackId String
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  addedAt DateTime @default(now())
}

model Playlist {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  tracks    Track[]
  listening Int     @default(0)
}

model Album {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  artist   Artist  @relation(fields: [artistId], references: [id])
  artistId String
  title    String
  cover    String
  tracks   Track[]
}
